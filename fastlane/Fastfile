# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

OWNER_NAME = "Chatsie"
OWNER_TYPE = "organization"
APP_NAME = "VPN"

desc "Increment Build version"
private_lane :get_incremented_build_number do |options|
    build_number =options[:build_number]
    incremented = build_number.to_i + 1
    incremented.to_s
end

desc "Fetch build version from App Center and update VersionName and VersionCode"
desc "Return: VersionName"
private_lane :fetch_version_code do |options|
    build_data = appcenter_fetch_version_number(
                 api_token: ENV['APPCENTER_API_TOKEN'],
                 owner_name: OWNER_NAME,
                 app_name: options[:app_name]
              )
    UI.important("Fastlane appcenter_fetch_build_number - #{build_data}")
    UI.crash!("build_data not set") if build_data == nil

    app_version_code = nil
    is_increment = options[:is_increment]
    if is_increment
        app_version_code = get_incremented_build_number(build_number: build_data["build_number"])
    else
        app_version_code = build_data["build_number"]
    end

    UI.important("Fastlane app_version_code - #{app_version_code} ðŸ†™")

    ENV["VERSION_CODE"] = app_version_code
    app_version_code
end

lane :share_dev do
       changelog = prompt(text: "Enter release notes")
       app_version_code = fetch_version_code(app_name: APP_NAME, app_center_token: ENV['APPCENTER_API_TOKEN'], is_increment: true)
        UI.important("Fetch version code - #{app_version_code}")
        UI.crash!("app_version_code not set") if app_version_code == nil and app_version_code.empty?

        gradle(task: "clean")

      gradle(
       task: 'assemble',
       build_type: 'release'
     )

     appcenter_upload(
       api_token: ENV['APPCENTER_API_TOKEN'],
       owner_name: OWNER_NAME,
      owner_type: OWNER_TYPE,
      app_name: APP_NAME,
       file: "./app/build/outputs/apk/release/app-release.apk",
       notify_testers: true,
       destinations: "Beta",
       destination_type: "group",
              release_notes: changelog
     )

   end

   lane :share_prod do
    changelog = prompt(text: "Enter release notes")
           app_version_code = fetch_version_code(app_name: APP_NAME, app_center_token: ENV['APPCENTER_API_TOKEN'], is_increment: true)
            UI.important("Fetch version code - #{app_version_code}")
            UI.crash!("app_version_code not set") if app_version_code == nil and app_version_code.empty?

            gradle(task: "clean")

          gradle(
           task: 'assemble',
           build_type: 'release'
         )

         appcenter_upload(
           api_token: ENV['APPCENTER_API_TOKEN'],
           owner_name: OWNER_NAME,
          owner_type: OWNER_TYPE,
          app_name: APP_NAME,
           file: "./app/build/outputs/apk/release/app-release.apk",
           notify_testers: true,
           destinations: "Release",
           destination_type: "group",
                  release_notes: changelog
         )

   end
